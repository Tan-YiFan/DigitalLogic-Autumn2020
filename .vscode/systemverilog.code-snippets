{
	// Place your experiment workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"module": {
		"prefix": "module",
		"body": [
			"module $1 (",
			"\t$0",
			");",
			"endmodule\n"
		]
	},
	"assign": {
		"prefix": "assign",
		"body": "assign $0 = "
	},
	"always_comb": {
		"prefix": "always_comb",
		"body": [
			"always_comb begin",
			"\t$0",
			"end\n"
		]
	},
	"always_ff": {
		"prefix": "always_ff",
		"body": [
			"always_ff @(posedge clk) begin",
			"\t$0",
			"end\n"
		]
	},
	"typedef": {
		"prefix": "typedef",
		"body": "typedef logic[$1:0] $0;\n"
	},
	"typedef struct packed": {
		"prefix": "typedef struct",
		"body": [
			"typedef struct packed {",
			"\t$0",
			"} $1;\n"
		]
	},
	"typedef enum": {
		"prefix": "typedef enum",
		"body": [
			"typedef enum logic [$1] {",
			"\t$0",
			"} $2;\n"
		]
	},
	"for_generate": {
		"prefix": "for",
		"body": [
			"for (genvar i = 0; i < $1; i++) begin",
			"\t$0",
			"end\n"
		]
	},
	"unique case": {
		"prefix": "unique",
		"body": [
			"unique case($1) begin",
			"\t$0",
			"\tdefault: begin",
			"\t\t",
			"\tend",
			"end"
		]
	},
	"priority case": {
		"prefix": "priority",
		"body": [
			"priority case(${1:1'b1}) begin",
			"\t$0",
			"\tdefault: begin",
			"\t\t",
			"\tend",
			"end"
		]
	}
}